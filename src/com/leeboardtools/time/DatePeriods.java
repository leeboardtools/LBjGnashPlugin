/*
 * Copyright 2018 Albert Santos.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.leeboardtools.time;

import java.time.LocalDate;
import java.time.Period;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Class that generates a {@link DateRange} for a number of periods. The actual
 * generation is performed via an {@link Iterator} returned by {@link DatePeriods#iterator(java.time.LocalDate) }.
 * Instances of this class are immutable.
 * @author Albert Santos
 */
public class DatePeriods {
    private final Period period;
    private final int periodCount;
    private final DateOffset startDateOffset;
    private final DateRange.Generator rangeGenerator;
    private final DateOffset rangeOffset;
    
    
    /**
     * Constructor.
     * @param period    The period at which to generate the date ranges.
     * @param periodCount   The number of periods to generate.
     * @param startDateOffset   The {@link DateOffset} defining the relationship between
     * the reference date passed to the iterator method and the actual first date of the period. If <code>null</code>
     * no offset will be applied.
     * @param rangeGenerator    The {@link DateRange.Generator} used to define the date range
     * returned by the iterator. If <code>null</code> then a date range of a single date is returned.
     * @param rangeOffset   The {@link DateOffset} defining the adjustment of the date range from the
     * range generator prior to return from the iterator. If <code>null</code> no adjustment will be made.
     */
    public DatePeriods(Period period, int periodCount, DateOffset startDateOffset, DateRange.Generator rangeGenerator, DateOffset rangeOffset) {
        this.period = period;
        this.periodCount = periodCount;
        this.startDateOffset = (startDateOffset == null) ? DateOffset.fromStandard(DateOffset.Standard.NULL, null, 0) : startDateOffset;
        this.rangeGenerator = (rangeGenerator == null) ? new DateRange.CurrentDate(1) : rangeGenerator;
        this.rangeOffset = rangeOffset;
    }
    
    /**
     * Constructor.
     * @param period    The period at which to generate the date ranges.
     * @param periodCount   The number of periods to generate.
     * @param startDateOffset   The {@link DateOffset} defining the relationship between
     * the reference date passed to the iterator method and the actual first date of the period. If <code>null</code>
     * no offset will be applied.
     */
    public DatePeriods(Period period, int periodCount, DateOffset startDateOffset) {
        this(period, periodCount, startDateOffset, null, null);
    }
    
    
    /**
     * @return The period of time between the date periods returned by the iterator.
     */
    public final Period getPeriod() {
        return period;
    }
    
    /**
     * @return The number of periods generated by the iterator.
     */
    public final int getPeriodCount() {
        return periodCount;
    }
    
    /**
     * @return The date offset to be added to the reference date passed to the iterator
     * method to obtain the first date for the period sequence.
     */
    public final DateOffset getStartDateOffset() {
        return startDateOffset;
    }
    
    /**
     * @return The range generator used to generate the date range from the current date
     * of the period sequence.
     */
    public final DateRange.Generator getRangeGenerator() {
        return rangeGenerator;
    }
    
    /**
     * @return The date offset used to adjust the date range generated by the range generator,
     * may be <code>null</code>
     */
    public final DateOffset getRangeOffset() {
        return rangeOffset;
    }
    
    
    class PeriodsIterator implements Iterator<DateRange> {
        private LocalDate currentDate;
        private int countRemaining;
        
        PeriodsIterator(LocalDate refDate) {
            currentDate = startDateOffset.getOffsetDate(refDate);
            countRemaining = periodCount;
        }
        
        @Override
        public final boolean hasNext() {
            return countRemaining > 0;
        }

        @Override
        public DateRange next() {
            if (countRemaining <= 0) {
                throw new NoSuchElementException();
            }
            
            LocalDate refDate = currentDate;
            currentDate = currentDate.minus(period);
            --countRemaining;
            DateRange range = rangeGenerator.generateRange(refDate);
            return range.applyDateOffset(rangeOffset);
        }
    }
    
    
    /**
     * Retrieves an iterator for generating the dates in the period.
     * @param refDate The reference date for the period. This date is adjusted
     * by the date period's start date offset.
     * @return The iterator.
     */
    public Iterator<DateRange> iterator(LocalDate refDate) {
        return new PeriodsIterator(refDate);
    }
}
